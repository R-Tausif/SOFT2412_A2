/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import org.json.JSONArray;
import org.json.JSONObject;
import org.junit.jupiter.api.*;

import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import java.io.*;

class AppTest {
    private InputStream sysInBackup;
    private PrintStream sysOutBackup;
    private DataManager data;
    private App machine;

    @BeforeEach
    public void setUp() {
        this.data = new DataManager("test");
        this.data.readData();
        this.sysInBackup = System.in;
        this.sysOutBackup = System.out;
        this.machine = new App();
    }

    @AfterEach
    public void cleanUp() {
        String cashFile = "src/test/resources/available_cash.json";
        String itemFile = "src/test/resources/available_items.json";
        String histFile = "src/test/resources/transaction_hist.json";
        String userFile = "src/test/resources/user_data.json";

        String copyCash = "src/test/resources/check_cash.json";
        String copyItems = "src/test/resources/check_items.json";
        String copyHist = "src/test/resources/check_transac.json";
        String copyUser = "src/test/resources/check_user.json";

        // Rewrite the available_cash.json and available_items.json back to original state
        PrintWriter output = null;
        PrintWriter output2 = null;
        PrintWriter output3 = null;
        PrintWriter output4 = null;

        Scanner scan = null;
        Scanner scan2 = null;
        Scanner scan3 = null;
        Scanner scan4 = null;
        try {
            scan = new Scanner(new File(copyCash));
            String json = scan.useDelimiter("\\Z").next();

            output = new PrintWriter(new FileOutputStream(cashFile));
            output.write(json);

            scan2 = new Scanner(new File(copyItems));
            String json2 = scan2.useDelimiter("\\Z").next();

            output2 = new PrintWriter(new FileOutputStream(itemFile));
            output2.write(json2);

            scan3 = new Scanner(new File(copyHist));
            String json3 = scan3.useDelimiter("\\Z").next();

            output3 = new PrintWriter(new FileOutputStream(histFile));
            output3.write(json3);

            scan4 = new Scanner(new File(copyUser));
            String json4 = scan4.useDelimiter("\\Z").next();

            output4 = new PrintWriter(new FileOutputStream(userFile));
            output4.write(json4);

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        output.close();
        output2.close();
        output3.close();
        output4.close();
        scan.close();
        scan2.close();
        scan3.close();
        scan4.close();

        // Set the console back to normal
        System.setIn(sysInBackup);
        System.setOut(sysOutBackup);
    }

    @Test
    public void loginSimpleBuy() {
        String userInput = "login\nJoh\nspace\nlogin\nJohn\nspace\nbuy\n3001\n2\ncash\n10\nexit";
        ByteArrayOutputStream baos = writeInputOutput(userInput);

        machine.start("test");
        String[] lines = baos.toString().split("\n");
        assertEquals(lines[0].trim(), "Welcome to the Vending Machine!");
        assertEquals(lines[46].trim(), "CUSTOMER Options: EXIT, CREATE AN ACCOUNT, LOGIN, BUY, HORIZONTAL/VERTICAL");
        assertEquals(lines[47].trim(), "Enter: PLEASE ENTER YOUR USERNAME:");
        assertEquals(lines[49].trim(), "SORRY THIS COMBINATION OF USERNAME AND PASSWORD DOESN'T EXIST");
        assertEquals(lines[95].trim(), "CUSTOMER Options: EXIT, CREATE AN ACCOUNT, LOGIN, BUY, HORIZONTAL/VERTICAL");
        assertEquals(lines[96].trim(), "Enter: PLEASE ENTER YOUR USERNAME:");
        assertEquals(lines[98].trim(), "YOU HAVE LOGGED IN SUCCESSFULLY!");
        assertEquals(lines[140].trim(), "CUSTOMER Options: EXIT, LOGOUT, BUY, HORIZONTAL/VERTICAL");

        DataManager newData = new DataManager("test");
        newData.readData();
        JSONObject cash = newData.getCashJSON();
        JSONArray items = newData.getItemsJSON();
        JSONArray history = newData.getHistJSON();
        JSONArray user = newData.getUsersJSON();

        assertEquals(cash.getInt("2"), 0);
        assertEquals(cash.getInt("10"), 1);
        assertEquals(items.getJSONObject(9).getInt("amount"), 5);
        assertEquals(history.length(), 7);
        assertEquals(history.getJSONObject(6).get("user"), "John");
        assertEquals(user.getJSONObject(5).getJSONArray("history").length(), 1);
    }

    @Test
    public void userCreateAccountInvalidCommands() {
        String userInput = "logout\nCreate an account\nJohn\nspace\ncreate an account\nnew customer\n123456\ncreate an account\nlogin\ninvalid\nlogout\nexit";
        ByteArrayOutputStream baos = writeInputOutput(userInput);

        machine.start("test");
        String[] lines = baos.toString().split("\n");
        assertEquals(lines[47].trim(), "Enter: Error: You have not logged in yet.");
        assertEquals(lines[93].trim(), "CUSTOMER Options: EXIT, CREATE AN ACCOUNT, LOGIN, BUY, HORIZONTAL/VERTICAL");
        assertEquals(lines[94].trim(), "Enter: YOU WANT TO CREATE AN ACCOUNT.");
        assertEquals(lines[95].trim(), "PLEASE ENTER YOUR USERNAME:");
        assertEquals(lines[96].trim(), "Enter your password:");
        assertEquals(lines[98].trim(), "SORRY THIS USERNAME ALREADY EXISTS. PLEASE TRY AGAIN.");
        assertEquals(lines[149].trim(), "YOUR ACCOUNT HAS BEEN CREATED SUCCESSFULLY!");
        assertEquals(lines[191].trim(), "CUSTOMER Options: EXIT, LOGOUT, BUY, HORIZONTAL/VERTICAL");
        assertEquals(lines[192].trim(), "Enter: Error: you must be an anonymous user to create a new customer account.");
        assertEquals(lines[235].trim(), "Enter: Error: Please LOGOUT from your current account first.");
        assertEquals(lines[278].trim(), "Enter: Error: There is no command called INVALID");
        assertEquals(lines[322].trim(), "Enter: You have successfully logged out:)");
        assertEquals(lines[370].trim(), "Thank you for your patronage!");
        assertEquals(lines[371].trim(), "See you next time!");

        DataManager data = new DataManager("test");
        data.readData();
        JSONArray users = data.getUsersJSON();
        assertEquals(users.length(), 7);
        assertEquals(users.getJSONObject(6).getString("name"), "new customer");
    }

    @Test
    public void cashierInvalidCommands() {
        String userInput = "login\n\n\nlogin\nmoney\n111111\nvertical\nhorizontal\nbuy\ncreate an account\nMODIFY items\nreports items\nREPORTS ITEMS SOLD\nREPORTS USERS\nReports cancelled\ncreate a new account\nexit";
        ByteArrayOutputStream baos = writeInputOutput(userInput);

        machine.start("test");
        String[] lines = baos.toString().split("\n");
        assertEquals(lines[0].trim(), "Welcome to the Vending Machine!");
        assertEquals(lines[49].trim(), "SORRY USERNAME OR PASSWORD CANNOT BE EMPTY");
        assertEquals(lines[98].trim(), "YOU HAVE LOGGED IN SUCCESSFULLY!");
        assertEquals(lines[100].trim(), "NOTICE! The following reports have been generated for CASHIER:");
        assertEquals(lines[113].trim(), "CASHIER Options: EXIT, LOGOUT, MODIFY CASH");
        assertEquals(lines[114].trim(), "Enter: Error: cashier does not have the access to VERTICAL");
        assertEquals(lines[129].trim(), "Enter: Error: cashier does not have the access to HORIZONTAL");
        assertEquals(lines[144].trim(), "Enter: Error: cashier does not have the access to BUY");

        assertEquals(lines[159].trim(), "Enter: Error: you must be an anonymous user to create a new customer account.");
        assertEquals(lines[175].trim(), "Enter: Error: cashier does not have the access to MODIFY ITEMS");
        assertEquals(lines[190].trim(), "Enter: Error: cashier does not have the access to REPORTS ITEMS");
        assertEquals(lines[205].trim(), "Enter: Error: cashier does not have the access to REPORTS ITEMS SOLD");
        assertEquals(lines[220].trim(), "Enter: Error: cashier does not have the access to REPORTS USERS");
        assertEquals(lines[235].trim(), "Enter: Error: cashier does not have the access to REPORTS CANCELLED");
        assertEquals(lines[250].trim(), "Enter: Error: cashier does not have the access to CREATE A NEW ACCOUNT");
    }

    @Test
    public void cashierReportsModify() {
        String userInput = "login\nmoney\n111111\nmodify cash\n5, 5, 0.2, 10\nyes\n15\nno\n2\nyes\n3\nreports change\nreports transaction\nexit\n";
        ByteArrayOutputStream baos = writeInputOutput(userInput);

        machine.start("test");
        String[] lines = baos.toString().split("\n");
        assertEquals(lines[49].trim(), "YOU HAVE LOGGED IN SUCCESSFULLY!");
        assertEquals(lines[65].trim(), "Enter: Please input all the note/coin values that you want to update separated by comma:");
        assertEquals(lines[67].trim(), "Currently there are x2 $5.00 in the vending machine.");
        assertEquals(lines[68].trim(), "Do you want to increase $5.00? (yes/no):How many $5.00 do you want to increase by?");
        assertEquals(lines[70].trim(), "Currently there are x5 $0.20 in the vending machine.");
        assertEquals(lines[71].trim(), "Do you want to increase $0.20? (yes/no):How many $0.20 do you want to decrease by?");
        assertEquals(lines[73].trim(), "Currently there are x0 $10.00 in the vending machine.");
        assertEquals(lines[74].trim(), "Do you want to increase $10.00? (yes/no):How many $10.00 do you want to increase by?");
        assertEquals(lines[89].trim(), "CASHIER Options: EXIT, LOGOUT, MODIFY CASH");
        assertEquals(lines[94].trim(), "$10.00: 3 (*)");
        assertEquals(lines[95].trim(), "$5.00: 17 (^)");
        assertEquals(lines[99].trim(), "$0.20: 3 (*)");
        assertEquals(lines[122].trim().replace(" ", ""), "datetimepaidchangemethoduseritemcodeamount");
    }

    @Test
    public void sellerInvalidCommands() {
        String userInput = "login\nuser2\nabc\nmodify cash\nreports change\nreports transaction\nreports users\nreports cancelled\nremove an account\nexit\n";
        ByteArrayOutputStream baos = writeInputOutput(userInput);

        machine.start("test");
        String[] lines = baos.toString().split("\n");
        assertEquals(lines[49].trim(), "YOU HAVE LOGGED IN SUCCESSFULLY!");
        assertEquals(lines[63].trim(), "SELLER Options: EXIT, LOGOUT, MODIFY ITEMS");
        assertEquals(lines[64].trim(), "Enter: Sorry, only owner and cashier have permission to update cash status!");
        assertEquals(lines[79].trim(), "Enter: Error: seller does not have the access to REPORTS CHANGE");
        assertEquals(lines[93].trim(), "Enter: Error: seller does not have the access to REPORTS TRANSACTION");
        assertEquals(lines[107].trim(), "Enter: Error: seller does not have the access to REPORTS USERS");
        assertEquals(lines[121].trim(), "Enter: Error: seller does not have the access to REPORTS CANCELLED");
        assertEquals(lines[135].trim(), "Enter: Error: seller does not have the access to REMOVE AN ACCOUNT");
    }

    @Test
    public void sellerReportModify() {
        String userInput = "login\nuser2\nabc\nmodify items\n3001\ncategory\nDrinks\ndone\n1001\nNAME\nWater\ndone\n2002\nprice\n10\ndone\n4001\namount\n10\ndone\ndone\nREPORTS ITEMS\nREPORTS ITEMS SOLD\nexit\n";
        ByteArrayOutputStream baos = writeInputOutput(userInput);

        machine.start("test");
        String[] lines = baos.toString().split("\n");
        DataManager data = new DataManager("test");
        data.readData();
        JSONArray items = data.getItemsJSON();

        assertEquals(lines[49].trim(), "YOU HAVE LOGGED IN SUCCESSFULLY!");
        assertEquals(items.getJSONObject(0).getString("name"), "Water");
        assertEquals(items.getJSONObject(6).getInt("price"), 10);
        assertEquals(items.getJSONObject(9).getString("category"), "Drinks");
        assertEquals(items.getJSONObject(13).getInt("amount"), 10);

    }

    @Test
    public void ownerCreateAccounts() {
        String userInput = "login\nOwner1\nowner123\ncreate a new account\nJohn\n111111\ncreate a new account\n\n\ncreate a new account\nWonderful Seller\n111111\nadmin\ncreate a new account\nWonderful Seller\n111111\nseller\nREPORTS USERS\nexit\n";
        ByteArrayOutputStream baos = writeInputOutput(userInput);

        machine.start("test");
        String[] lines = baos.toString().split("\n");

        assertEquals(lines[49].trim(), "YOU HAVE LOGGED IN SUCCESSFULLY!");
        assertEquals(lines[71].trim(), "OWNER Options: EXIT, LOGOUT, MODIFY CASH, MODIFY ITEMS, CREATE A NEW ACCOUNT, REMOVE AN ACCOUNT");
        assertEquals(lines[76].trim(), "SORRY THIS USERNAME ALREADY EXISTS. PLEASE TRY AGAIN.");
        assertEquals(lines[98].trim(), "OWNER Options: EXIT, LOGOUT, MODIFY CASH, MODIFY ITEMS, CREATE A NEW ACCOUNT, REMOVE AN ACCOUNT");
        assertEquals(lines[102].trim(), "SORRY USERNAME OR PASSWORD CANNOT BE EMPTY");
        assertEquals(lines[131].trim(), "SORRY YOU CAN ONLY CREATE ACCOUNTS OF TYPE SELLER, CASHIER OR OWNER");
        assertEquals(lines[159].trim(), "seller ACCOUNT HAS BEEN CREATED SUCCESSFULLY!");

        DataManager data = new DataManager("test");
        data.readData();
        JSONArray users = data.getUsersJSON();
        assertEquals(users.length(), 7);
        assertEquals(users.getJSONObject(6).getString("name"), "Wonderful Seller");
        assertEquals(users.getJSONObject(6).getString("role"), "seller");
    }

    @Test
    public void ownerRemoveAccounts() {
        String userInput = "login\nOwner1\nowner123\nremove an account\nuser\nremove an account\nWonderful Seller\nremove an account\n\nremove an account\nmoney\nREPORTS CANCELLED\nexit\n";
        ByteArrayOutputStream baos = writeInputOutput(userInput);

        machine.start("test");
        String[] lines = baos.toString().split("\n");

        assertEquals(lines[49].trim(), "YOU HAVE LOGGED IN SUCCESSFULLY!");
        assertEquals(lines[71].trim(), "OWNER Options: EXIT, LOGOUT, MODIFY CASH, MODIFY ITEMS, CREATE A NEW ACCOUNT, REMOVE AN ACCOUNT");
        assertEquals(lines[76].trim(), "SORRY YOU CANNOT REMOVE CUSTOMER ACCOUNTS.");
        assertEquals(lines[103].trim(), "SORRY THIS USERNAME DOESN'T EXIST. PLEASE TRY AGAIN.");
        assertEquals(lines[129].trim(), "SORRY USERNAME CANNOT BE EMPTY");
        assertEquals(lines[156].trim(), "ACCOUNT HAS BEEN REMOVED SUCCESSFULLY!");

        DataManager data = new DataManager("test");
        data.readData();
        JSONArray users = data.getUsersJSON();
        assertEquals(users.length(), 5);
    }

    @Test
    public void cancellingTransaction() {
        String userInput = "buy\ncancel\nlogin\nJohn\nspace\nbuy\n1001\n2\ncancel\nlogin\nOwner1\nowner123\nREPORTS CANCELLED\nexit\n";
        ByteArrayOutputStream baos = writeInputOutput(userInput);

        machine.start("test");
        String[] lines = baos.toString().split("\n");

        assertEquals(lines[46].trim(), "CUSTOMER Options: EXIT, CREATE AN ACCOUNT, LOGIN, BUY, HORIZONTAL/VERTICAL");
        assertEquals(lines[49].trim(), "(You can type CANCEL to cancel the transaction in any process of purchasing)");
        assertEquals(lines[52].trim(), "You have successfully cancelled the transaction.");
        assertEquals(lines[102].trim(), "YOU HAVE LOGGED IN SUCCESSFULLY!");
        assertEquals(lines[144].trim(), "CUSTOMER Options: EXIT, LOGOUT, BUY, HORIZONTAL/VERTICAL");
        assertEquals(lines[147].trim(), "(You can type CANCEL to cancel the transaction in any process of purchasing)");
        assertEquals(lines[150].trim(), "Please specify the corresponding quantities for each product");
        assertEquals(lines[153].trim(), "You have successfully cancelled the transaction.");
        assertEquals(lines[200].trim(), "CUSTOMER Options: EXIT, CREATE AN ACCOUNT, LOGIN, BUY, HORIZONTAL/VERTICAL");
        assertEquals(lines[203].trim(), "YOU HAVE LOGGED IN SUCCESSFULLY!");
        assertEquals(lines[225].trim(), "OWNER Options: EXIT, LOGOUT, MODIFY CASH, MODIFY ITEMS, CREATE A NEW ACCOUNT, REMOVE AN ACCOUNT");
        assertEquals(lines[228].trim().replace(" ", ""), "|date|user|reason|");
        assertEquals(lines[230].trim().replace(" ", ""), "|2022-10-10|anonymous|usercancelled|");
    }


    /*
     * Helper method to get the input string and feed it into the input stream
     * and return the output string
     */
    public ByteArrayOutputStream writeInputOutput(String input) {
        ByteArrayInputStream bais = new ByteArrayInputStream(input.getBytes());
        System.setIn(bais);

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        PrintStream printStream = new PrintStream(baos);
        System.setOut(printStream);
        return baos;
    }
}
